* Header
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src


* Open Tasks
** Packages
*** TODO all-the-icons
*** TODO all-the-icons-dired
*** TODO atomic-chrome
*** TODO (openai  :location  (recipe :fetcher github :repo "emacs-openai/openai"))
*** TODO (chatgpt :location  (recipe :fetcher github :repo "emacs-openai/chatgpt"))
*** TODO (codeium :location  (recipe :fetcher github :repo "Exafunction/codeium.el"))
*** TODO dictcc
*** TODO editorconfig
*** TODO graphql-mode
*** TODO helm-posframe
*** TODO org-jira
*** TODO osm
*** TODO (scalaz-unicode-input-method :location (recipe :fetcher github :repo "folone/emacs-scalaz-unicode-input-method"))
*** TODO smithy-mode
** auto-completion
*** TODO auto-completion-complete-with-key-sequence "jk"
*** TODO auto-completion-enable-help-tooltip 'manual
*** TODO auto-completion-enable-sort-by-usage t
*** TODO auto-completion-enable-snippets-in-popup t
*** TODO auto-completion-idle-delay 0.0
*** TODO auto-completion-minimum-prefix-length 1
*** TODO auto-completion-private-snippets-directory (expand-file-name "snippets" user-emacs-directory)
*** TODO auto-completion-use-company-box t)

*** TODO (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)


* General Settings
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux)
       (setenv "SSH_AUTH_SOCK" "/run/user/1000/gnupg/S.gpg-agent.ssh"))
      (t
       (setenv "SSH_AUTH_SOCK" "/Users/gunnar.bastkowski/.gnupg/S.gpg-agent.ssh")))

(setq! auth-sources                       '(password-store))

(setq! fill-column                        120
       fci-rule-color                     "#555555"
       fci-rule-width                     1)
(global-display-fill-column-indicator-mode)

(setq! tab-width                          8)

(setq! user-full-name                     "Gunnar Bastkowski"
       user-mail-address                  "gunnar@bastkowski.name")

(setq! which-key-use-C-h-commands         t)

(setq! package-install-upgrade-built-in   t)


;; Override function because we are generating config.el from this file
(defun doom/goto-private-config-file ()
  "Open your private config.el file."
  (interactive)
  (find-file (expand-file-name "config.org" doom-user-dir)))

(server-start)
#+end_src


* Appearance
** Theme
There are two ways to load a theme. Both assume the theme is installed and available.
You can either set `doom-theme' or manually load a theme with the `load-theme' function.
This is the default:
#+begin_src emacs-lisp
(setq! doom-theme 'gunnar)
#+end_src

** Folds
*** Functions
Folds by indentation
Found at https://stackoverflow.com/questions/1587972/how-to-display-indentation-guides-in-emacs/4459159#4459159
and decided that I like it
#+begin_src emacs-lisp
(defun aj-toggle-fold ()
  "Toggle fold all lines larger than indentation on current line"
  (interactive)
  (let ((col 1))
    (save-excursion
      (back-to-indentation)
      (setq col (+ 1 (current-column)))
      (set-selective-display
       (if selective-display nil (or col 1))))))
#+end_src
*** TODO (spacemacs/set-leader-keys "of" 'aj-toggle-fold)
** Font
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux)
       (setq! doom-font (font-spec :family "Iosevka" :size 18)))
      (t
       (setq! doom-font (font-spec :family "Iosevka" :size 13))))

(global-prettify-symbols-mode t)
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them up,
~M-x eval-region~ to execute elisp code, and 'M-x doom/reload-font'
to refresh your font settings.

If Emacs still can't find your font, it likely wasn't installed correctly.
Font issues are rarely Doom issues!

*** TODO   (spacemacs/set-leader-keys "tP" 'global-prettify-symbols-mode)

** Line Numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type     t
      display-line-numbers-width    4)
#+end_src


* Editing
** Duplicate
*** Functions
from https://www.emacswiki.org/emacs/CopyingWholeLines
#+BEGIN_SRC emacs-lisp
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
    With argument N, make N copies.
    With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(map! :leader :desc "Duplicate line or region" :n "id" #'duplicate-line-or-region)
#+END_SRC


* Mu4e
** Settings
#+begin_src emacs-lisp
#+end_src


* OpenAI
** Settings
#+begin_src emacs-lisp
(setq! openai-key                         (password-store-get "private/openai/emacs-api-key")
       openai-user                        "gunnar.bastkowski@gmail.com")
#+end_src
** Functions
#+BEGIN_SRC emacs-lisp
(require 'request)
(require 'json)

(setq api-key (password-store-get "private/openai/emacs-api-key"))

(defun chatgpt-align-code (start end)
  "Align code by equal signs using ChatGPT's chat completions."
  (interactive "r")
  (let* ((code-text (buffer-substring-no-properties start end))
         (api-key (password-store-get "private/openai/emacs-api-key")))
    (request "https://api.openai.com/v1/chat/completions"
      :type "POST"
      :headers `(("Content-Type" . "application/json")
                 ("Authorization" . ,(concat "Bearer " api-key)))
      :data (json-encode `(
                           ("model" . ,"gpt-4")
                           ("messages" . ((("role" . "user")
                                           ("content" . ,(concat "Align the following code by equal signs:\n\n" code-text)))))))
      :parser 'json-read
      :success (cl-function
                (lambda (&key data &allow-other-keys)
                  (when data
                    (let* ((responses (gethash "choices" data))
                           (latest-response (aref responses 0))
                           (text (gethash "message" (aref (gethash "messages" latest-response) 0))))
                      (delete-region start end)
                      (insert text)))))
      :error (cl-function
              (lambda (&rest args &key error-thrown &allow-other-keys)
                (message "Failed to align code: %S" error-thrown))))))
#+END_SRC


* Org Mode
Most of the stuff here is to implement a GTD workflow.

Inspiration can be obtained from
- [[https://www.labri.fr/perso/nrougier/GTD/index.html][Get Things Done with Emacs]]
- [[https://blog.jethro.dev/posts/org_mode_workflow_preview/][Org-mode Workflow: A Preview]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://vtimofeenko.com/posts/my-doom-emacs-setup/#orgmode-config][My doom-emacs setup | Vladimir Timofeenko's blog]]

The following steps are involved:
1. Capture
2. Clarify
3. Organize
4. Review
5. Engage

** General
*** Settings
#+begin_src emacs-lisp
(setq! org-bullets-bullet-list     '("x" "◆" "▴" "▸")
       org-directory                "~/org/"
       org-mobile-directory         "~/org/")

(after! org
  (setq org-tags-column              100))
#+end_src

*** Functions
#+begin_src emacs-lisp
(defun org-insert-src-block (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive (let ((src-code-types
                      '(
                        "gunnar-test"
                        "C" "C++" "R" "clojure" "css" "ditaa" "dot" "emacs-lisp" "gnuplot" "haskell" "http"
                        "java" "js" "latex" "lisp" "org" "plantuml" "python" "ruby"
                        "sass" "scala" "sh" "sql" "sqlite")))
                 (list (ido-completing-read "Source code type: " src-code-types))))
  (progn (newline-and-indent)
         (insert (format "#+BEGIN_SRC %s\n" src-code-type))
         (newline-and-indent)
         (insert "#+END_SRC\n")
         (previous-line 2)
         (org-edit-src-code)))
#+end_src

** Agenda
*** Settings
**** org-agenda-prefix-format
#+begin_src emacs-lisp
(setq! org-agenda-prefix-format      '((agenda . " %i %-16:c%?-12t% s")
                                       (todo   . " %i %-15:c [%e] ")
                                       (tags   . "                  %i")
                                       (search . " %i %-20:c"))
       org-agenda-custom-commands
       '(("T" "Agenda and next items" ((agenda    ""
                                                  ((org-agenda-skip-function            '(org-agenda-skip-entry-if 'deadline))
                                                   (org-deadline-warning-days           0)))
                                       (todo      "NEXT"
                                                  ((org-agenda-overriding-header        "Next Actions")
                                                   (org-agenda-sorting-strategy         '(priority-down))
                                                   (org-agenda-skip-function            '(org-agenda-skip-entry-if 'deadline))
                                                   (org-agenda-todo-keyword-format      "")))
                                       (tags-todo "CATEGORY=\"inbox\""
                                                  ((org-agenda-sorting-strategy         '(priority-down))
                                                   (org-agenda-overriding-header        "Inbox")
                                                   (org-agenda-todo-keyword-format      "")))
                                       (todo      "WAIT"
                                                  ((org-agenda-sorting-strategy         '(priority-down))
                                                   (org-agenda-overriding-header        "Waiting For")
                                                   (org-agenda-todo-keyword-format      "")))
                                       (tags      "CLOSED>=\"<today>\""
                                                  ((org-agenda-overriding-header "Completed today")
                                                   (org-agenda-todo-keyword-format      ""))))
          ((org-agenda-start-day "+0d")(org-agenda-span 'day)))

         ("M" "Mobimeo Agenda"        ((agenda)
                                       (tags-todo "@mobimeo+TODO=\"NEXT\""
                                                  ((org-agenda-sorting-strategy         '(priority-down))
                                                   (org-agenda-overriding-header        "Next Actions")
                                                   (org-agenda-todo-keyword-format      "")))
                                       (tags-todo "@mobimeo+TODO=\"WAIT\""
                                                  ((org-agenda-sorting-strategy         '(priority-down))
                                                   (org-agenda-overriding-header        "Waiting For")
                                                   (org-agenda-todo-keyword-format      "")))
                                       (tags-todo "@mobimeo+TODO=\"TODO\""
                                                  ((org-agenda-overriding-header        "TODO Items")
                                                   (org-agenda-todo-keyword-format      ""))))
          ((org-agenda-span 'day)))

         ("c" "Inbox" tags-todo "CATEGORY=\"inbox\""
          ((org-agenda-overriding-header "Inbox")))
         ("g" "Get Things Done (GTD)" ((tags      "CATEGORY=\"inbox\""
                                                  ((org-agenda-prefix-format            "  %?-12t% s")
                                                   (org-agenda-hide-tags-regexp         "inbox")
                                                   (org-agenda-overriding-header        "\nInbox: clarify and organize\n")))))))
#+end_src
**** org-agenda-files
#+begin_src emacs-lisp
(setq! org-agenda-files             (mapcar (lambda (x) (concat org-directory x))
                                            '("inbox-akiko.org"
                                              "inbox-galaxy.org"
                                              "inbox-s7.org"
                                              "inbox-yesomeo.org"
                                              "tickler.org"
                                              "projects.org")))
#+end_src
**** diary
#+begin_src emacs-lisp
(setq! org-agenda-include-diary     t
       org-agenda-start-on-weekday  1
       diary-date-forms             '((month     "/"  day   "[^/0-9]")
                                      (month     "/"  day   "/"   year "[^0-9]")
                                      (monthname " *" day   "[^,0-9]")
                                      (monthname " *" day   ", *" year "[^0-9]")
                                      (dayname   "\\W")
                                      (year      "/"  month "/"   day  "[^,0-9]")))
#+end_src

*** Functions
**** agenda-views
#+begin_src emacs-lisp
(defun gunnar/org-agenda-show-inbox         (&optional arg) (interactive "P") (org-agenda arg "c"))
(defun gunnar/org-agenda-show-today         (&optional arg) (interactive "P") (org-agenda arg "a"))
(defun gunnar/org-agenda-show-today-mobimeo (&optional arg) (interactive "P") (org-agenda arg "b"))
(defun gunnar/org-capture-inbox             (&optional arg) (interactive "P") (org-capture arg "i"))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(map! :leader :desc "Show agenda for today"         :n "oa1" #'gunnar/org-agenda-show-today)
(map! :leader :desc "Show Mobimeo agenda for today" :n "oa2" #'gunnar/org-agenda-show-today-mobimeo)
(map! :leader :desc "Show Inbox"                    :n "oa3" #'gunnar/org-agenda-show-inbox)
#+end_src

** Babel
*** Settings
#+begin_src emacs-lisp
(setq org-babel-load-languages  '((emacs-lisp . t)
                                  (awk . t)
                                  (ditaa . t)
                                  (dot . t)
                                  (java . t)
                                  (dot . t)
                                  (plantuml . t)
                                  (ruby . t)))
#+end_src

** Brain
#+begin_src emacs-lisp
(setq! org-brain-include-file-entries t)
#+end_src

** Capture
*** Keybindings
#+begin_src emacs-lisp
(map! :leader :desc "Capture Inbox"                 :n "oci" #'gunnar/org-capture-inbox)
;; (spacemacs/set-leader-keys "Gs" 'gunnar/all-calendars-to-diary) ;
#+end_src

** Calendar
*** Keybindings
#+begin_src emacs-lisp
(map! :leader :desc "Show calendar"         :n "y" #'calendar)
#+end_src

*** Settings
#+begin_src emacs-lisp
(setq! calendar-date-display-form   '((format "%s-%.2d-%.2d" year (string-to-number month) (string-to-number day)))
       calendar-date-style          'iso
       calendar-week-start-day      1
       calendar-mark-holidays-flag  1)

(setq! calendar-intermonth-text     '(propertize
                                      (format "%2d"
                                              (car
                                               (calendar-iso-from-absolute
                                                (calendar-absolute-from-gregorian (list month day year)))))
                                      'font-lock-face 'font-lock-constant-face)
       calendar-intermonth-header   (propertize "WK" 'font-lock-face 'font-lock-keyword-face))
(setq! calendar-longitude 13.331850
       calendar-latitude  52.446540
       calendar-location-name "Berlin, DE")
#+end_src

*** Functions
#+begin_src emacs-lisp
(defun gunnar/all-calendars-to-diary ()
  (interactive)
  (progn
    (gunnar/some-calendar-to-diary (password-store-get "mobimeo/calendar/url"))
    (gunnar/some-calendar-to-diary (password-store-get "private/cloud.bastkowski.name/calendar-gunnar-url"))))

(defun gunnar/some-calendar-to-diary (calendar-url)
  (let ((ical-filename (make-temp-file "calendar.ics")))
    (progn
      (url-copy-file calendar-url ical-filename t)
      (set-buffer (find-file-noselect ical-filename))
      (icalendar-import-buffer diary-file t)
      (kill-buffer)
      'ok)))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(map! :leader :desc "All calendars to diary"        :n "occ" #'gunnar/all-calendars-to-diary)
#+end_src

*** Settings
**** keywords
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords         '((sequence "TODO(t)"  ; A task that needs doing & is ready to do
                                              "NEXT(n)"  ; next step in a project
                                              "STRT(s)"  ; A task that is in progress
                                              "WAIT(w)"  ; Something external is holding up this task
                                              "|"
                                              "DONE(d)"  ; successfully completed
                                              "KILL(k)") ; cancelled, aborted
                                    (sequence "[ ](T)"   ; needs doing
                                              "[-](S)"   ; in progress
                                              "[?](W)"   ; held up or paused
                                              "|"
                                              "[X](D)")  ; completed
                                    (sequence "|"
                                              "OKAY(o)"
                                              "YES(y)"
                                              "NO(n)"))
        org-todo-keyword-faces    '(("[-]"  . +org-todo-active)
                                    ("STRT" . +org-todo-active)
                                    ("NEXT" . +org-todo-active)
                                    ("[?]"  . +org-todo-onhold)
                                    ("WAIT" . +org-todo-onhold)
                                    ("NO"   . +org-todo-cancel)
                                    ("DONE" . +org-todo-cancel)
                                    ("KILL" . +org-todo-cancel))))
#+end_src

**** capture & refile
#+begin_src emacs-lisp
(after! org
  (setq org-default-notes-file    (concat org-directory
                                          (if (string-prefix-p "akiko" (system-name) t)
                                              "inbox-akiko.org"
                                            "inbox-yesomeo.org")))

  (setq org-capture-templates     '(("t" "Task"           entry (file org-default-notes-file)
                                     "* TODO %^{Description} %? %i\n :PROPERTIES: :CREATED: %U :END:\n"
                                     :immediate-finish t)
                                    ("n" "Note"           entry (file org-default-notes-file)
                                     "* %^{Description} %? %i\n :PROPERTIES: :CREATED: %U :END:\n"
                                     :immediate-finish t)
                                    ("l" "Bookmarks"      entry (file "")
                                     "** %(org-cliplink-capture)%?\n :PROPERTIES: :CREATED: %U :END:\n"
                                     :immediate-finish t)
                                    ("s" "Step"           entry (clock)
                                     "* %^{Description}%?%i\n :PROPERTIES: :CREATED: %U :END:\n")
                                    ;; ("l" "Bookmarks"      entry (file+headline (lambda () (gunnar/daily-note)) "Bookmarks")
                                    ;;  "** %(org-cliplink-capture)%?\n" :unnarrowed t)
                                    ("x" "org-protocol"   entry (file+headline org-default-notes-file "Inbox")
                                     "* TODO Review %c\n%U\n%i\n :PROPERTIES: :CREATED: %U :END:\n"
                                     :immediate-finish))

        org-refile-targets        '(("~/org/projects.org"                     :maxlevel . 3)
                                    ("~/org/someday.org"                      :maxlevel . 3)
                                    ("~/org/bookmarks.org"                    :maxlevel . 5)
                                    ("~/org/tickler.org"                      :level    . 1))))
#+end_src

*** Functions
#+begin_src emacs-lisp
(defun gunnar/org-agenda-show-inbox (&optional arg) (interactive "P") (org-agenda arg "c"))
(defun gunnar/org-agenda-show-today (&optional arg) (interactive "P") (org-agenda arg "a"))
(defun gunnar/org-agenda-show-today-mobimeo (&optional arg) (interactive "P") (org-agenda arg "b"))
(defun gunnar/org-capture-inbox (&optional arg) (interactive "P") (org-capture arg "i"))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo) (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry (or (outline-next-heading) (goto-char (point-max))))))

(defun org-current-is-todo () (string= "TODO" (org-get-todo-state)))

(defun gunnar/get-clocked-time ()
  (interactive)
  (let ((hours (/ (org-clock-get-clocked-time) 60))
        (minutes (% (org-clock-get-clocked-time) 60)))
    (format "[%02d:%02d]" hours minutes)))

(defun gunnar/save-org-buffers ()
  "Save `org-agenda-files' buffers without user confirmation.
See also `org-save-all-org-buffers'"
  (interactive)
  (message "Saving org-agenda-files buffers...")
  (save-some-buffers t (lambda ()
                         (when (member (buffer-file-name) org-agenda-files)
                           t)))
  (message "Saving org-agenda-files buffers... done"))

(advice-add 'org-refile :after
            (lambda (&rest _)
              gunnar/save-org-buffers))

(defun gunnar/org-clock-expired-p ()
  (when (org-clocking-p)
    (let ((effort-in-minutes (org-duration-to-minutes org-clock-effort))
	  (clocked-time (org-clock-get-clocked-time)))
      (if (or (null effort-in-minutes) (zerop effort-in-minutes))
          nil
        (>= clocked-time effort-in-minutes)))))
#+end_src

** Journal
*** Open Tasks
**** TODO org-enable-appear-support t
**** TODO org-enable-asciidoc-support t
**** TODO org-enable-bootstrap-support t
**** TODO org-enable-epub-support t
**** TODO org-enable-github-support t
**** TODO org-enable-jira-support t
**** TODO jiralib-url "https://jira.mobimeo.com"
**** TODO org-enable-notifications t
**** TODO org-enable-reveal-js-support t
**** TODO org-enable-org-brain-support t
**** TODO org-enable-org-journal-support t
**** TODO org-enable-sticky-header nil
**** TODO org-journal-carryover-items "TODO=\"TODO|NEXT\""
**** TODO org-journal-dir "~/org/journal/"
**** TODO org-journal-file-format "%Y/%m/%d.org"
**** TODO org-journal-file-header "#+TITLE: Daily Journal\n#+CATEGORY: Journal"
**** TODO org-journal-find-file 'find-file
**** TODO org-journal-enable-agenda-integration t
**** TODO org-start-notification-daemon-on-startup t)
*** Settings
#+begin_src emacs-lisp
(setq! org-clock-persist 'history)
(org-clock-persistence-insinuate)

(setq! diary-file                             (concat org-directory "diary"))
(setq! timeclock-file                         (concat org-directory "timeclock"))
(setq! org-journal-carryover-items            "TODO=\"TODO|NEXT\""
       org-journal-dir                        "~/org/journal/"
       org-journal-file-format                "%Y/%m/%d.org"
       org-journal-file-header                "#+TITLE: Daily Journal\n#+CATEGORY: Journal"
       org-journal-find-file                  'find-file
       org-journal-enable-agenda-integration  t)
#+end_src

*** Functions
#+begin_src emacs-lisp
(defun gunnar/daily-note ()         (concat org-directory (format-time-string "/%Y/%B_%-e.org")))
#+end_src

** Pomodoro
*** TODO '(org-pomodoro-finished-sound "/Users/gunnar.bastkowski/Sounds/mixkit-correct-answer-reward-952.wav")
*** TODO '(org-pomodoro-start-sound "/Users/gunnar.bastkowski/Sounds/mixkit-positive-notification-951.wav")
** Reveal
*** Settings
#+begin_src emacs-lisp
(setq! org-re-reveal-title-slide          nil
       org-re-reveal-transition           "fade"
       org-re-reveal-hlevel               2
       org-re-reveal-width                1920
       org-re-reveal-center               nil)
#+end_src

** TODO
(add-hook 'org-mode-hook '(lambda ()
                        ;; turn on flyspell-mode by default
                        (flyspell-mode 1)
                        ;; C-TAB for expanding
                        (local-set-key (kbd "C-<tab>")
                                        'yas-expand-from-trigger-key)
                        ;; keybinding for editing source code blocks
                        (local-set-key (kbd "C-c s e")
                                        'org-edit-src-code)
                        ;; keybinding for inserting code blocks
                        (local-set-key (kbd "C-c s i")
                                        'org-insert-src-block)))






* Projects
** Keybindings
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Settings
#+begin_src emacs-lisp
(setq! projectile-project-search-path '("~/git/mobimeo/" "~/git/gbastkowski/"))
(setq! lsp-file-watch-threshold nil)
#+end_src

** Functions
#+BEGIN_SRC emacs-lisp
(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))

(defun gunnar-open-terminal-right ()
  (interactive)
  (progn
    (split-window-right-and-focus)
    (projectile-run-vterm)))
#+END_SRC


* Scala
** Settings
*** General
#+begin_src emacs-lisp
(setq! scala-auto-insert-asterisk-in-comments t
       scala-sbt-window-position              nil
       scala-enable-gtags                     t)
#+end_src
*** Scala-Indent
#+begin_src emacs-lisp
(setq! scala-indent:use-javadoc-style nil)
#+end_src
*** LSP
#+begin_src emacs-lisp
#+end_src


* Documentation
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:
- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
  package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
